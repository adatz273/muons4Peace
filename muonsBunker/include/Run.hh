#ifndef RUN_HH
#define RUN_HH

#include "G4Run.hh"
#include <vector>

//#include "Hist.hh"

class G4VUserPrimaryGeneratorAction;

namespace cosmicMuonsEcoMug {
// forward declarations
class DetectorConstruction;
class PrimaryGeneratorAction;


/**
 * @file    YourRun.hh
 * @class   YourRun
 * @author  M. Novak
 * @date    December 2019
 *
 * Implementation of ``Geant4`` ``G4Run`` for this user application.
 *
 * The run of your application usually encapsulates all infomation that you would like to collect
 * during the simulation. Each thread will have their own object form this run class that is generated
 * before the simulation by the individual threads itself simply calling the ``G4RunAction::GenerateRun()``
 * (i.e. YourRunAction::GenerateRun()) method of the ``G4RunAction`` (i.e. YourRunAction) object that
 * was constructed and registered for the given thread (in YourActionInitialization::Build() or YourActionInitialization::BuildForMaster()
 * methods for the workers or for the master respecively).
 *
 * While the run objects of the worker threads are used during the simulation to collect thread-local data, the run object generated by the master,
 * is not used during the simulation. This latter is used only at the end of the run and only to collect all thread-local run data into one gloabl
 * run object. This is done, by calling the Merge() method of this class that should contain the implementation how run data can be added/merged.
 *
 * @note for this application we will implement a simple histogram class. The only reason why we do this is to demonstrait the good practice regarding
 *  the implementation of objects, that are used inside the run object, shoudl follow (e.g. easily `"mergable"`).
 */

class Run : public G4Run {

  // Method declaration:
  public:

    // CTR:
    Run(DetectorConstruction* det, G4VUserPrimaryGeneratorAction* prim);
    ~Run() override;


    /**
     * Virtual method to be implemented to define the way of merging the underlying
     * (thread local) Run global data structures into one global instance.
     *
     * This method will be invoked by the master on its own run object (rbsRun)
     * on each of the worker, i.e. thread local, run (rbsRun) objects passing by their
     * pointer as the input argument.
     *
     * @param [in] run Pointer to a run (rbsRun) obejct that needs to be merged to this run object.
     */
    //void Merge(const G4Run* run) override;


    //
    // Additional custom methods:


    // Method that we will call from the master run action at the end to compute final quantities using the
    // its run global Run object into which all thread local run global run object instance has already been merged
    // (when rbsRunAction::EndOfRunAction() is invoked).
    void  EndOfRunSummary();



  // Data member declarations:
  private:
    // data members to obtain some information needed at the end for the summary
    // Note: that the PrimaryGeneratorAction is not set to the master's RunAction
    //       so it will be nullptr for the master's Run. We will set it in
    //       the Merge.
    DetectorConstruction*    fDetector;
    G4VUserPrimaryGeneratorAction*  fPrimary;
};

}


#endif